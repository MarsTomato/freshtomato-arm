--- miniupnpd/miniupnpd.c
+++ miniupnpd/miniupnpd.c
@@ -996,11 +996,13 @@ parselanaddr(struct lan_addr_s * lan_add
 				fprintf(stderr, "Error parsing address : %s\n", lan_addr->ext_ip_str);
 				return -1;
 			}
+#if 0
 			if(addr_is_reserved(&lan_addr->ext_ip_addr)) {
 				/* error */
 				fprintf(stderr, "Error: option ext_ip address contains reserved / private address : %s\n", lan_addr->ext_ip_str);
 				return -1;
 			}
+#endif
 		}
 	}
 #endif
@@ -1721,10 +1723,12 @@ init(int argc, char * * argv, struct run
 			fprintf(stderr, "Error: option ext_ip contains invalid address %s\n", use_ext_ip_addr);
 			return 1;
 		}
+#if 0
 		if (addr_is_reserved(&addr)) {
 			fprintf(stderr, "Error: option ext_ip contains reserved / private address %s, not public routable\n", use_ext_ip_addr);
 			return 1;
 		}
+#endif
 	}
 
 	if(debug_flag)
--- miniupnpd/natpmp.c
+++ miniupnpd/natpmp.c
@@ -108,9 +108,11 @@ static void FillPublicAddressResponse(un
 			syslog(LOG_ERR, "Failed to get IP for interface %s", ext_if_name);
 			resp[3] = 3;	/* Network Failure (e.g. NAT box itself
 			                 * has not obtained a DHCP lease) */
+#if 0
 		} else if (addr_is_reserved(&addr)) {
 			resp[3] = 3;	/* Network Failure, box has not obtained
 			                   public IP address */
+#endif
 		} else {
 			inet_pton(AF_INET, tmp, resp+8); /* ok */
 		}
--- miniupnpd/upnpdescgen.c
+++ miniupnpd/upnpdescgen.c
@@ -1283,7 +1283,7 @@ genEventVars(int * len, const struct ser
 				else {
 					struct in_addr addr;
 					char ext_ip_addr[INET_ADDRSTRLEN];
-					if(getifaddr(ext_if_name, ext_ip_addr, INET_ADDRSTRLEN, &addr, NULL) < 0 || addr_is_reserved(&addr)) {
+					if(getifaddr(ext_if_name, ext_ip_addr, INET_ADDRSTRLEN, &addr, NULL) < 0) {
 						str = strcat_str(str, len, &tmplen, "0.0.0.0");
 					} else {
 						str = strcat_str(str, len, &tmplen, ext_ip_addr);
--- miniupnpd/upnpsoap.c
+++ miniupnpd/upnpsoap.c
@@ -344,8 +344,10 @@ GetExternalIPAddress(struct upnphttp * h
 			ext_if_name);
 		strncpy(ext_ip_addr, "0.0.0.0", INET_ADDRSTRLEN);
 	}
+#if 0
 	if (addr_is_reserved(&addr))
 		strncpy(ext_ip_addr, "0.0.0.0", INET_ADDRSTRLEN);
+#endif
 #else
 	struct lan_addr_s * lan_addr;
 	strncpy(ext_ip_addr, "0.0.0.0", INET_ADDRSTRLEN);
