--- iptables-1.8.x/include/linux/netfilter/nf_conntrack_tuple_common.h
+++ iptables-1.8.x/include/linux/netfilter/nf_conntrack_tuple_common.h
@@ -7,6 +7,8 @@
 	IP_CT_DIR_MAX
 };
 
+/* TOMATO */
+#ifndef _NF_CONNTRACK_TUPLE_H
 /* The protocol-specific manipulable parts of the tuple: always in
  * network order
  */
@@ -33,6 +36,8 @@
 		__be16 key;	/* GRE key is 32bit, PPtP only uses 16bit */
 	} gre;
 };
+#endif
+/* END TOMATO */
 
 #define CTINFO2DIR(ctinfo) ((ctinfo) >= IP_CT_IS_REPLY ? IP_CT_DIR_REPLY : IP_CT_DIR_ORIGINAL)
 
--- iptables-1.8.x/include/linux/netfilter.h
+++ iptables-1.8.x/include/linux/netfilter.h
@@ -77,4 +77,13 @@
 	struct in6_addr	in6;
 };
 
+static inline int nf_inet_addr_cmp(const union nf_inet_addr *a1,
+				   const union nf_inet_addr *a2)
+{
+	return 	a1->all[0] == a2->all[0] &&
+		a1->all[1] == a2->all[1] &&
+		a1->all[2] == a2->all[2] &&
+		a1->all[3] == a2->all[3];
+}
+
 #endif /* __LINUX_NETFILTER_H */
--- iptables-1.8.x/extensions/libxt_RATEEST.c
+++ iptables-1.8.x/extensions/libxt_RATEEST.c
@@ -48,7 +48,7 @@
 #define TIME_UNITS_PER_SEC	1000000
 
 static int
-RATEEST_get_time(unsigned int *time, const char *str)
+RATEEST_get_time(unsigned int *rateest_time, const char *str)
 {
 	double t;
 	char *p;
@@ -71,21 +71,21 @@
 			return -1;
 	}
 
-	*time = t;
+	*rateest_time = t;
 	return 0;
 }
 
 static void
-RATEEST_print_time(unsigned int time)
+RATEEST_print_time(unsigned int rateest_time)
 {
-	double tmp = time;
+	double tmp = rateest_time;
 
 	if (tmp >= TIME_UNITS_PER_SEC)
 		printf(" %.1fs", tmp / TIME_UNITS_PER_SEC);
 	else if (tmp >= TIME_UNITS_PER_SEC/1000)
 		printf(" %.1fms", tmp / (TIME_UNITS_PER_SEC / 1000));
 	else
-		printf(" %uus", time);
+		printf(" %uus", rateest_time);
 }
 
 static void RATEEST_parse(struct xt_option_call *cb)
